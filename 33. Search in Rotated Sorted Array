class Solution {
    ------------// First Approach--------------------
    public int search(int[] nums, int target) {
        int si = 0 , ei = nums.length -1;
        return rotatedSearch(nums,target, si, ei);
    }
    public int rotatedSearch(int[] arr,int tar,int si,int ei) {
        //Base case
        if(si > ei){
            return -1;
        }
        //mid
        int mid = si + (ei - si) /2;

        //target is on  mid
        if(arr[mid] == tar) {
            return mid;
        }

        //case 1: Mid is on L1
        if(arr[si] <= arr[mid]) {
            //case a: search left before mid
            if(arr[si] <= tar && tar <= arr[mid]) {
                return rotatedSearch(arr,tar,si,mid-1);
            } else {    // Search in right ok mid
                rotatedSearch(arr, tar, mid + 1,ei);
            }
        }

        //  Case 2 : Mid on L2
        else {
            //case c : right
            if(arr[mid] <= tar && tar <= arr[ei]) {
                return rotatedSearch(arr, tar, mid + 1, ei);
            } else {
                return rotatedSearch(arr, tar, mid - 1, si);
            }
        }
    }

   // ------------------------Second Approach-------------------------------------
    public int search(int[] nums, int target) {
        if(nums.length == 0){
            return -1;
        }
        
        return helper(nums,target,0,nums.length-1);  
    }
    public int helper(int[] nums, int tar, int low, int high){
        if(low > high){
            return -1;
        }
        int mid = low+(high-low)/2;
        
        if(nums[mid] == tar){
            return mid;
        }
        
        int left = helper(nums,tar,low,mid-1);
        int right = helper(nums, tar, mid+1, high);
        
        if(left != -1 || right != -1){
            return left == -1 ? right : left;
        }
        
        return -1;
    }
}
