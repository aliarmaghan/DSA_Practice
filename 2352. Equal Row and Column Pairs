class Solution {
    public int equalPairs(int[][] grid) {
    
        #BruteForce Approach with TC = O(n^3)
       
        int row = grid.length;
        int col = grid[0].length;
        int count = 0;
        for(int r=0; r<row; r++) {
            for(int c=0; c<col; c++) {
                boolean isEqual = true;
                for(int i=0; i<row; i++) {
                    if(grid[r][i] != grid[i][c]) {
                        isEqual = false;
                        break;
                    }
                }
                if(isEqual == true) {
                        count++;
                    }
            }
        }
        return count;
        
        #Optimize Approach
        
        HashMap<String, Integer> map = new HashMap<>();
        int row = grid.length;
        int col = grid[0].length;
        for(int i=0; i<row; i++) {
            String res="";
            for(int j=0; j<col; j++) {
            res += "-" +grid[i][j];
            }
            map.put(res,map.getOrDefault(res, 0) +1);
        }
        int count = 0;
        for(int j=0; j<col; j++) {
            String res = "";
            for(int i=0; i<row; i++) {
                res += "-" + grid[i][j];
            }
            count += map.getOrDefault(res, 0);
        }
        return count;
    }
}
